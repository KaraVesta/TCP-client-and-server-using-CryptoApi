#define WIN32_LEAN_AND_MEAN  
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#pragma warning(disable: 4996)
#define WIN32_LEAN_AND_MEAN  
#include <windows.h>  
#include <winsock2.h>  
#include <ws2tcpip.h> 
#include <cstdio> 
#include "stdlib.h"
#include <string.h> 
#include <locale.h>
#include <wincrypt.h>
#include<iostream>
#include<regex>
#include<string>

using namespace std;


// Директива линковщику: использовать библиотеку сокетов   
#pragma comment(lib, "ws2_32.lib")  

#define SEND_SIZE 500
#define RECV_SIZE 2000



void lib_init();
void lib_deinit();
void client_connect(int sock, struct sockaddr* addr);
int err(char* function);


void getcom(string& str)
{
	if (str == "OS " || str == "T " || str == "OT " || str == "M " || str == "D " || str == "F ");
	else if (str == "A " || str == "Ow ")
	{
		char i;
		cout << "Entry k if key or f if file" << endl;
		cin >> i;
		string k = "";
		k += i;
		string path;
		cout << "Entry path" << endl;
		getchar();
		getline(cin, path);
		str += k + " " + path;
		cout << str;
	}
	else cout << "Wrong command, sorry" << endl;
}


void lib_init()
{
	WSADATA wsa_data;
	WSAStartup(MAKEWORD(2, 2), &wsa_data);
}

void lib_deinit()
{
	WSACleanup();
}

int err(char* function)
{
	printf("Error in function \"%sock\". Error num: %d\n", function, WSAGetLastError());
	return -1;
}

int send_request(int sock, char * request)
{
	int sent = 0;

	while (sent < SEND_SIZE)
	{
		int res = send(sock, request + sent, SEND_SIZE - sent, 0);
		if (res < 0)
			return err("send");

		sent += res;
	}

	return 0;
}

int recv_answer(int sock, HCRYPTKEY hSessionKey)
{
	char buffer[65556] = { 0 };

	int res = 0;
	while (res <= 0)
		res += recv(sock, buffer, 65556, 0);

	CryptDecrypt(hSessionKey, 0, true, 0, (BYTE *)buffer, (DWORD *)&res);

	cout<<"Server answer:"<<endl << buffer << endl;

	return 0;
}

void client_connect(int sock, struct sockaddr* addr)
{
	int addr_len = sizeof(struct sockaddr);

	while (connect(sock, addr, addr_len) != 0)
	{
		Sleep(1000);
		cout<<"Wait..."<<endl;
	}
}



int io_interract()
{
	lib_init();
	int sock;
	cout << "Hello, if you don't know commands, ask somebody" << endl;
	string tcpip;
	cout << "Entry ip server" << endl;
	getline(cin, tcpip);
	regex reg("^((25[0-5]|2[0-4][0-9]|[1][0-9][0-9]|[0-9]{1,2})\\.){3}(25[0-5]|2[0-4][0-9]|[1][0-9][0-9]|[0-9]{1,2})$");
	if (!regex_match(tcpip, reg))
	{
		cout << "ERROR IP FORMAT" << endl;
		return 0;
	}
	sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock < 0)
		return err("socket");

	char tcp[128] = {0};
	printf("Enter the IP-address of server: \n");
	//getchar();
	//fgets(tcp, 16, stdin);
	const char* tcp_addr_ipv4 = tcpip.c_str();

	printf("Enter the server port: \n");
	int p;
	cin >> p;
	const int port=p;
	if (port > 65535)
	{
		cout << "Wrong port value" << endl;
		return 0;
	}

	struct sockaddr_in addr;
	memset(&addr, 0, sizeof(addr));
	addr.sin_family = AF_INET;
	addr.sin_port = htons(port);
	addr.sin_addr.s_addr = inet_addr(tcp_addr_ipv4);

	client_connect(sock, (sockaddr*)&addr);

	char buff[2048] = { 0 };

	HCRYPTPROV hProv;
	HCRYPTKEY hPublicKey;
	DWORD count = 0;
	char SessionKey[256] = { 0 };

	BYTE data[2048] = { 0 };
	HCRYPTKEY hSessionKey;

	if (CryptAcquireContext(&hProv, NULL, MS_ENHANCED_PROV, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) == 0)
		return err("CryptAcquireContext");

	if (CryptGenKey(hProv, CALG_RSA_KEYX, 0, &hPublicKey) == 0)
		return err("CryptGenKey");

	if (CryptExportKey(hPublicKey, 0, PUBLICKEYBLOB, 0, NULL, &count) == 0)
		return err("CryptExportKey(NULL)");

	if (CryptExportKey(hPublicKey, 0, PUBLICKEYBLOB, 0, data, &count) == 0)
		return err("CryptExportKey(data)");

	send(sock, (char *)data, (int)count, 0);
	unsigned long len = recv(sock, SessionKey, sizeof(SessionKey), 0);
	CryptImportKey(hProv, (BYTE *)SessionKey, len, hPublicKey, 0, &hSessionKey);


	string request_message;
	getchar();
	getline(cin, request_message);
	getcom(request_message);
	char* request_msg = new char [2048];
	memcpy(request_msg, request_message.c_str(), 2048);
	
	//get_request_msg(request, request_msg);

	len = RECV_SIZE;
	if (CryptEncrypt(hSessionKey, 0, true, 0, (BYTE *)request_msg, &len, (DWORD)2000) == 0)
		return err("CryptEncrypt");

	send_request(sock, request_msg);

	recv_answer(sock, hSessionKey);

	closesocket(sock);
	lib_deinit();

	return 0;
}

int main()
{
	setlocale(LC_ALL, "rus");
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);
	io_interract();
		

	system("pause");

	return 0;
}
